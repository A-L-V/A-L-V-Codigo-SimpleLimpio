/*
Llamar CSS

<link rel="stylesheet" href="desktop.css" media="screen and (min-width: 800px)"/>

<style>
	@media (min-width: 400px){
		...
	} 
</style>

atributo: style="color: red ;"
*/

/*-------------------------------------------------------------------------------------*/

/*SELECTORES*/
/*de tipo*/
h1, h2 { /*Aplica para todo h1 y h2*/
	font-size: 80px;
}

p {
	font-size: 30px;
}

.clase {
	font-size: 10px;
}

#id {
	font-size: 20px;
}

/*de atributo*/
a[href=""]{
	font-size: 4px;
}


/*Universal*/
* {
	font-size: 50px;
}

/*SELECTORES COMBINADOS*/
/*descendiente*/
div p {
	font-size: 50px;
}

/*hijo directo*/
div > p {
	font-size: 50px;
}
/*Elemento adyacente*/
div + p {
	font-size: 50px;
}
/*General de hermanos*/
div ~ p {
	font-size: 50px;
}

/*-------------------------------------------------------------------------------------*/

/*PsudoClase: acciones del usuario*/
p:active p:focus{
	font-size: 50px;
}

/*parrafo que este de segunda */
div p::nth-child(2){
	font-size: 50px;
}

/*PsudoElementos:: acceder elementos html no accesible */
p::first-letter {
	font-size: 50px;
}
p::after p::before {
	content: "emoji*";
}

::placeholder{
	font-size: 50px;
}

/*Especificad*/
p{
	font-size: 50px!important;
}

/*estilos en linea*/
	/*1000*/

#id{
	font-size: 50px;
}

.clases .atributos .psudoclases{
	font-size: 50px;
}	

p | .psudoelementos {
	font-size: 50px;
}
* {
	display: flex
}

/*Display: tipo de visualizaci√≥n que van a tener nuestros elementos HTML.

block:  Estos elementos ocupan toda la pantalla, por lo que si quieres agregar otro elemento, este se agregar√° autom√°ticamente abajo. 
No importa que tengas poco contenido, el elemento s√≠ o s√≠ va a ocupar toda la pantalla

inline: Estos elementos son los que su caja mide exactamente lo mismo que su contenido. 
Estos elementos los podemos usar en textos y en lugar de que se agreguen en una nueva l√≠nea se agregaran justo al ladito del texto. 
‚ùó Tienen como desventaja que no podemos ponerles m√°rgenes ni tampoco podemos cambiar su tama√±o.

inline-block: pone el siguiente al costado
Esto es una mezcla. Con este display podemos tener tanto los beneficios de inline como de block, es decir, podemos tener elementos que no ocupen todo el ancho de la pantalla, sino que ocupen solamente lo que su contenido ocupa, pero tambi√©n vamos a poder darle m√°rgenes y podremos cambiar su tama√±o ü§†.

flex: 

grid: 
*/

/*Posicionamiento

Static
Utilizamos este valor no vamos a tener ning√∫n cambio porque todas las etiquetas vienen con este valor.
Cuando estamos en este position no podemos utilizar las propiedades left, top, right y bottom.

Absolute
Con absolute el elemento sale de su lugar y el navegador reacomoda los elemento, poniendo otro elemento en el lugar del elemento con position absolute. Podemos posicionar al elemento como queramos.
Relative
Con relative no sucede lo mismo que absolute, el elemento mantiene su lugar, pero podemos posicionarlo donde queramos.
Lo podemos usar como contenedor para que los elementos que tengan un position absolute tomen como referencia al padre que nosotros queremos (se adhiere al elemento relativo m√°s cercano) y no a otro, delimita el movimiento del hijo.

Fixed
Este valor de position nos permite que el elemento que queramos nos siga a todos lados desde el momento en el que nos topemos con √©l.

Sticky
Es similar a fixed con la diferencia que cuando encuentra a otro elemento con su mismo position, sticky, le da lugar al ese elemento.

Initial
Vuelve el position de un elemento a como estaba originalmente.

Inherit
Lo usamos si queremos que nuestro elemento herede el position de su padre.
*/


/*Z-index

Contexto de Aplilamiento

*/

/*Flex box
Ordena de manera sistematica el interior de los hijos
*/
.flex-container {
	display: flex;
	flex-direction: column; 
	flex-wrap: wrap; /*Al achicar el tama√±o este se desplaza hacia la siguiente fila y no se bloquea*/
}	

.item-1 {
	flex-shrink: 0;/*que no se encoja*/
}

.item-1 {
	flex-grow: 0;/*ocupa el resto de espacio*/
}

.flex-container{
	display: flex;
	flex-direction: row;
	align-items: center;
}

/*
css grid
ordena de varias manera los hijos
*/
.grid {
	display: grid;
	grid-template-columns: 200px auto 200px; /*tama√±o y cantidad de comlunas, el auto autocompleta el espacio*/
	grid-template-columns: repeat(3,auto); /*3 columnas, con tama√±o auto*/
	grid-template-columns: 1fr 2fr 2fr; /*fr: frames- divisiones de pantalla*/
	grid-template-rows: 1fr 2fr 3fr; /*ajusta tama√±o de height de la pantalla*/
	grid-gap: 1rem; /*agrega un margin a todos*/
}

/*sea*/
.grid {
	display: grid;
	grid-template-columns: repeat(4,1fr);
}

/*El quinto(n) item dentro del grid, lo modifica en el tama√±o */
.item:first-child(5) {
	grid-column-start: 1;
	grid-column-end: 4;
	grid-row-start: 1;
	grid-row-end: 3; /*aumenta el tama√±o largo*/
	grid-column: 1 / span 3; /*lo mismo que start-end*/
	grid-row: 1 / span 2;
}

/*para las galerias*/
.grid{
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}
/*Templade areas*/

.container {
	display: grid;
	grid-template-areas: 
		'header header header'
		'content content sidebar'
		'box-1 box-2 box3'
		'footer footer footer'
	;
}
.header {
	grid-area: header;
}
.content {
	grid-area: content;
}
.sidebar {
	grid-area: sidebar;
}

/*Media querys with grid*/
@media(max-width: 768px){
	.grid{
		grid-template-columns: repeat(2,1fr);
	}
}
@media(max-width: 768px){
	.grid{
		grid-template-columns: 1fr;
	}
}
